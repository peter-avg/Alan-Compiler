main () : proc
mergesort (x: reference int [], l: int, r: int) : proc
    merge (x: reference int [], start: int, mid: int, end: int) : proc
            aux (x_itr: int, l: int, r: int) : proc
                cur : int;
            {
                    if (x_itr >= end) return;

                if (l < mid & r < end) {
                    if (x[l] < x[r]) {
                        cur = x[l];
                        l = l+1;
                    } else {
                        cur = x[r];
                        r = r+1;
                    }
                } else if (l < mid) {
                    cur = x[l];
                    l = l+1;
                } else return; -- r < end, in which case these elements are already in correct position

                aux(x_itr+1, l, r);
                x[x_itr] = cur;
            }
    {
        aux(start, start, mid); -- no need for curly brackets as it is just one statement
    }
{
    -- sort [l,r) segment
    if (l == r-1) return;
    mergesort(x, l, (l+r)/2);
    mergesort(x, (l+r)/2, r);
    
    -- merge (separate function to allocate local variables in them and reduce stack consumption)
    merge(x, l, (l+r)/2, r);
}


	x : int [10000];
	n : int;
	i : int;
{
	n = readInteger();
	
	if (n <= 0) return;

	i = 0;
	while (i < n) {
		x[i] = readInteger();
		i = i+1;
	}

	mergesort(x, 0, n);
	
	writeInteger(x[0]);
	i = 1;
	while (i < n) {
		writeString(" ");
		writeInteger(x[i]);
		i = i+1;
	}
	writeChar('\n');
}

